            var count = 6;
            var shift = 2 * sideLength * sqrt3;
            while(mostDown > - 10){
                vertices.unshift([
                    vertices[0], vertices[1] - shift, vertices[2],
                    vertices[3], vertices[4] - shift, vertices[5],
                    vertices[6], vertices[7] - shift, vertices[8],
                    vertices[9], vertices[10] - shift, vertices[11],
                    vertices[12], vertices[13] - shift, vertices[14],
                    vertices[15], vertices[16] - shift, vertices[17]
                ]);
                count += 6;
                mostDown -= shift;
            }
            while(mostUp < 10){
                vertices.unshift([
                    vertices[0], vertices[1] + shift, vertices[2],
                    vertices[3], vertices[4] + shift, vertices[5],
                    vertices[6], vertices[7] + shift, vertices[8],
                    vertices[9], vertices[10] + shift, vertices[11],
                    vertices[12], vertices[13] + shift, vertices[14],
                    vertices[15], vertices[16] + shift, vertices[17]
                ]);
                count += 6;
                mostUp += shift;
            }
            shift = 
            while(mostLeft > -10){
                vertices.unshift([
                    vertices[0], vertices[1] , vertices[2],
                    vertices[3], vertices[4], vertices[5],
                    vertices[6], vertices[7], vertices[8],
                    vertices[9], vertices[10], vertices[11],
                    vertices[12], vertices[13], vertices[14],
                    vertices[15], vertices[16], vertices[17]
                ]);
                count += 6;
                mostLeft -= shift;
            }
            while(mostRight < 10){
                vertices.unshift([
                    vertices[0], vertices[1] , vertices[2],
                    vertices[3], vertices[4], vertices[5],
                    vertices[6], vertices[7], vertices[8],
                    vertices[9], vertices[10], vertices[11],
                    vertices[12], vertices[13], vertices[14],
                    vertices[15], vertices[16], vertices[17]
                ]);
            }



                    function translation(vertices, x, y){
            var arrlength = vertices.length;
            var newarr;
            for(i = 0; i < arrlength; i ++){
                if(i % 3 == 0){
                        newarr = [
                        vertices[0], vertices[1] - shift, vertices[2],
                        vertices[3], vertices[4] - shift, vertices[5],
                        vertices[6], vertices[7] - shift, vertices[8],
                        vertices[9], vertices[10] - shift, vertices[11],
                        vertices[12], vertices[13] - shift, vertices[14],
                        vertices[15], vertices[16] - shift, vertices[17]
                    ]
                }
            }
            return newarr;
        }




















        <!--
    Xiaowei Chen
    xic220
    CSE 313 - Fall 2018
    Project 1: Use different DrawArray() to create an image
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="style.css" type="text/css">
    <script src="./dist/gl-matrix.js" type="text/javascript"></script>
    <script id="shader-fs" type="x-shader/x-fragment">
        precision mediump float;
        uniform vec4 uColor;

        void main(void) {
            gl_FragColor = uColor;
        }
        
    </script>
    <script id="shader-vs" type="x-shader/x-vertex">
        attribute vec3 aPosition;	
        uniform mat4 uMVMatrix;
        uniform mat4 uPMatrix;
        uniform vec3 uScale;
        uniform vec3 uRotation;
        uniform vec3 uTranslation;
        uniform vec3 uResolution;

        void main(void) {
            vec3 zeroToOne = aPosition / uResolution;
            vec3 zeroToTwo = zeroToOne * 2.0;
            vec3 clipSpace = zeroToTwo - 1.0;
         
            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);
//            gl_Position = uPMatrix * uMVMatrix * vec4(aPosition, 1.0);
        }
    </script>
    <script type="text/javascript" src="app.js"></script>
    <title>Project 1</title>
</head>


<body onload="initGL()">
    <canvas id="webGLcanvas"></canvas>
</body>


</html>